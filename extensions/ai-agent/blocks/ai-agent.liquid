
<!-- Modal Backdrop -->
<div id="chatbot-backdrop" style="
  display: none;
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 9998;
"></div>


<!-- NEW Modal -->
<div id="chatbot-messages" style="
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 0;
  border-radius: 12px;
  width: 90%;
  max-width: 700px;
  box-shadow: 0 15px 30px rgba(0,0,0,0.2);
  z-index: 9999;
  font-family: 'DM Sans', sans-serif;
  overflow: hidden;
">
  <!-- Close Button -->
  <button onclick="closeChatbotModal()" style="
    position: absolute;
    top: 15px;
    right: 20px;
    background: none;
    border: none;
    font-size: 22px;
    font-weight: bold;
    color: #333;
    cursor: pointer;
    z-index: 10;
  ">&times;</button>

  <!-- Flex Container -->
  <div style="display: flex; flex-direction: row; height: 100%;">
    <!-- Image Section -->
    <div style="flex: 1; background-color: #f9f9f9; display: flex; align-items: center; justify-content: center;">
      <img id="chatbot-image" src="" alt="" style="width: 100%; height: auto; object-fit: contain; max-height: 100%;" />
    </div>

    <!-- Info Section -->
    <div style="flex: 1; padding: 30px; display: flex; flex-direction: column; justify-content: center;">
      <h3 id="chatbot-title" style="margin: 0 0 10px; font-size: 1.5rem; font-weight: 600;"></h3>
      <p id="chatbot-price" style="font-weight: bold; font-size: 1.2rem; margin-bottom: 10px;"></p>
      <p id="chatbot-text" style="margin-bottom: 20px; color: #555;"></p>

      <form method="POST" action="/cart/add" style="margin-top: auto;">
        <input type="hidden" name="id" id="upsell-variant-id" />
        <button type="submit" style="
          background-color: #000;
          color: #fff;
          padding: 12px 24px;
          font-size: 1rem;
          border: none;
          border-radius: 6px;
          cursor: pointer;
          width: 100%;
          transition: background 0.3s ease;
        ">Add to Cart</button>
      </form>
    </div>
  </div>
</div>

<script>
const button = document.getElementById('chatbot-button');
const messages = document.getElementById('chatbot-messages');
const textContainer = document.getElementById('chatbot-text');

async function fetchUpsellSuggestion() {
  try {
    const cart = await fetch('/cart.js').then(res => res.json());
    const response = await fetch('/apps/upsell', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        "Access-Control-Allow-Origin": "*",
      },
      body: JSON.stringify({
        cartItems: cart.items,
      }),
    });

    const data = await response.json();
    console.log(data, 'upsell response');
   // showChatbotModal(data.suggestion);

   const modelMessage = data.suggestion

   const jsonMatch = modelMessage.match(/\{[\s\S]*?\}/);

    if (!jsonMatch) {
      throw new Error('No valid JSON found in model response');
    }

    // Clean and parse the JSON block
    const cleanedJson = jsonMatch[0]
      .replace(/[\n\r\t]/g, '')     // remove newlines, tabs, etc.
      .replace(/\\(?=")/g, '');     // remove unnecessary backslashes before quotes

    const upsellData = JSON.parse(cleanedJson);
    console.log('Parsed upsell data:', upsellData);
  
   showChatbotModal(upsellData)

  } catch (err) {
    console.error('Upsell API error:', err);
   // showChatbotModal("Something went wrong. Please try again.");
  }
}


function showChatbotModal(message) {
 const modal = document.getElementById('chatbot-messages');
 const titleEl = document.getElementById('chatbot-title');
 const imageEl = document.getElementById('chatbot-image');
 const priceEl = document.getElementById('chatbot-price');
 const textEl = document.getElementById('chatbot-text');
 const variantInput = document.getElementById('upsell-variant-id');


  titleEl.textContent = message.title || '';
  priceEl.textContent = message.price ? `$${message.price}` : '';
  textEl.textContent = message.message || '';
  imageEl.src = message.image;
  //variantInput.value = message.id;

const gid = message.id
const numericId = gid.split("/").pop(); // "12345678901234"


variantInput.value = numericId
  console.log('Image URL:', message.image);


 
  document.getElementById('chatbot-messages').style.display = 'block';
  document.getElementById('chatbot-backdrop').style.display = 'block';
}



function closeChatbotModal() {
  document.getElementById('chatbot-messages').style.display = 'none';
  document.getElementById('chatbot-backdrop').style.display = 'none';
}



(function () {
  const originalFetch = window.fetch;

  window.fetch = async (...args) => {
    const response = await originalFetch(...args);

    const url = args[0];

    if (typeof url === 'string' && url.includes('/cart/add')) {
      console.log('[Cart Alert] Add to cart triggered via fetch:', url);

      // Use .clone() if you need to read the body here
      try {
        const clonedResponse = response.clone();
        const data = await clonedResponse.json();
        console.log('[Cart Alert] Added item:', data);
        fetchUpsellSuggestion(); // Custom logic
      } catch (err) {
        console.error('Error reading response:', err);
      }
    }

    return response; // ðŸš¨ Always return the response
  };
})();


(function () {
  const originalXHROpen = XMLHttpRequest.prototype.open;

  XMLHttpRequest.prototype.open = function (method, url) {
    if (url.includes('/cart/add')) {
      this.addEventListener('load', function () {
        console.log('[Cart Alert - XHR] Add to cart triggered via XMLHttpRequest:', url);
        fetchUpsellSuggestion(); // custom logic
      });
    }
    return originalXHROpen.apply(this, arguments);
  };
})();


document.addEventListener('submit', function (e) {
  const form = e.target;
  if (form.action.includes('/cart/add')) {
    console.log('[Cart Alert - Form] Add to cart triggered via form submission');
    fetchUpsellSuggestion();
  }
});


//looks out for cart.js changes
(function () {
  console.log('[Cart Watcher] Initialized');

  let previousCartItems = [];

  function getCart() {
    return fetch('/cart.js')
      .then(res => res.ok ? res.json() : Promise.reject('Failed to fetch cart'))
      .then(cart => cart.items || [])
      .catch(err => {
        console.error('[Cart Watcher] Error fetching cart:', err);
        return [];
      });
  }

  function hasCartChanged(oldItems, newItems) {
    if (oldItems.length !== newItems.length) return true;

    const oldMap = new Map(oldItems.map(item => [item.id, item.quantity]));
    const newMap = new Map(newItems.map(item => [item.id, item.quantity]));

    for (let [id, qty] of newMap.entries()) {
      if (oldMap.get(id) !== qty) return true;
    }

    return false;
  }

  function onCartChange(newCartItems) {
    console.log('[Cart Watcher] Cart changed!', newCartItems);
   fetchUpsellSuggestion();
  }

  async function checkCartLoop() {
    const currentCartItems = await getCart();

    if (hasCartChanged(previousCartItems, currentCartItems)) {
      onCartChange(currentCartItems);
      previousCartItems = currentCartItems;
    }

    setTimeout(checkCartLoop, 10); // Recheck every 1.5 seconds
  }

  // Start polling
  getCart().then(items => {
    previousCartItems = items;
    checkCartLoop();
  });

})();



</script>

{% schema %}
  {
    "name": "AI Agent",
    "target": "section",
    "class": "chatbot-section",
    "settings": []
  }
  {% endschema %}


