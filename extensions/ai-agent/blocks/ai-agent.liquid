{% comment %} <div id="chatbot-container" style="margin: 20px 0;">
  <div id="chatbot-messages" ></div>
  <button id="chatbot-button" style="margin-top: 10px; padding: 10px 20px; background-color: #3b82f6; color: white; border: none; border-radius: 5px;">
    Suggest an Upsell
  </button>
</div> {% endcomment %}

<!-- Chatbot Trigger Container -->
<div id="chatbot-container" style="margin: 20px 0;">
  <button id="chatbot-button" style="
    margin-top: 10px;
    padding: 10px 20px;
    background-color: #3b82f6;
    color: white;
    border: none;
    border-radius: 5px;
  ">
    Suggest an Cross-sell
  </button>
</div>

<!-- Modal Backdrop -->
<div id="chatbot-backdrop" style="
  display: none;
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 9998;
"></div>

<!-- Modal -->
{% comment %} <div id="chatbot-messages" style="
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 25px 30px;
  border-radius: 10px;
  width: 90%;
  max-width: 400px;
  box-shadow: 0 15px 30px rgba(0,0,0,0.2);
  z-index: 9999;
  font-family: sans-serif;
">
  <p id="chatbot-text" style="margin-bottom: 20px;"></p>
  <button onclick="closeChatbotModal()" style="
    background: #000;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  ">Close</button>
</div> {% endcomment %}

{% comment %} <div id="chatbot-messages" style="
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 25px 30px;
  border-radius: 10px;
  width: 90%;
  max-width: 400px;
  box-shadow: 0 15px 30px rgba(0,0,0,0.2);
  z-index: 9999;
  font-family: sans-serif;
  text-align: center;
">
  <img id="chatbot-image" src="" alt="" style="width:40px; height:40px" />
  <h3 id="chatbot-title" style="margin: 10px 0;"></h3>
  <p id="chatbot-price" style="font-weight: bold; margin-bottom: 10px;"></p>
  <p id="chatbot-text" style="margin-bottom: 20px;"></p>
  
  <form method="POST" action="/cart/add">
    <input type="hidden" name="id" id="upsell-variant-id" />
    <button type="submit">Add to Cart</button>
  </form>
  
  

  <button onclick="closeChatbotModal()" style="
    background: #000;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  ">Close</button>
</div> {% endcomment %}





<!-- NEW Modal -->
<div id="chatbot-messages" style="
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 0;
  border-radius: 12px;
  width: 90%;
  max-width: 700px;
  box-shadow: 0 15px 30px rgba(0,0,0,0.2);
  z-index: 9999;
  font-family: 'DM Sans', sans-serif;
  overflow: hidden;
">
  <!-- Close Button -->
  <button onclick="closeChatbotModal()" style="
    position: absolute;
    top: 15px;
    right: 20px;
    background: none;
    border: none;
    font-size: 22px;
    font-weight: bold;
    color: #333;
    cursor: pointer;
    z-index: 10;
  ">&times;</button>

  <!-- Flex Container -->
  <div style="display: flex; flex-direction: row; height: 100%;">
    <!-- Image Section -->
    <div style="flex: 1; background-color: #f9f9f9; display: flex; align-items: center; justify-content: center;">
      <img id="chatbot-image" src="" alt="" style="width: 100%; height: auto; object-fit: contain; max-height: 100%;" />
    </div>

    <!-- Info Section -->
    <div style="flex: 1; padding: 30px; display: flex; flex-direction: column; justify-content: center;">
      <h3 id="chatbot-title" style="margin: 0 0 10px; font-size: 1.5rem; font-weight: 600;"></h3>
      <p id="chatbot-price" style="font-weight: bold; font-size: 1.2rem; margin-bottom: 10px;"></p>
      <p id="chatbot-text" style="margin-bottom: 20px; color: #555;"></p>

      <form method="POST" action="/cart/add" style="margin-top: auto;">
        <input type="hidden" name="id" id="upsell-variant-id" />
        <button type="submit" style="
          background-color: #000;
          color: #fff;
          padding: 12px 24px;
          font-size: 1rem;
          border: none;
          border-radius: 6px;
          cursor: pointer;
          width: 100%;
          transition: background 0.3s ease;
        ">Add to Cart</button>
      </form>
    </div>
  </div>
</div>












{% comment %} <script>

  const button = document.getElementById('chatbot-button');
  const messages = document.getElementById('chatbot-messages');

  button.addEventListener('click', async () => {
    button.disabled = true;
    button.textContent = 'Thinking...';

    try {
      const cart = await fetch('/cart.js').then(res => res.json());
      console.log(cart.items, 'cartt')


      const response = await fetch('/apps/upsell', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          "Access-Control-Allow-Origin": "*",
          },
        body: JSON.stringify({
           cartItems: cart.items,
         }),
      });

      const data = await response.json();
      console.log(data, 'dataii')
      const msg = document.createElement('p');
      msg.textContent = data.suggestion;
      messages.appendChild(msg);
    } catch (err) {
      console.error('Error:', err);
      alert('Something went wrong. Try again.');
    } finally {
      button.disabled = false;
      button.textContent = 'Suggest an Upsell';
    }
  });
</script> {% endcomment %}

<script>
  const button = document.getElementById('chatbot-button');
const messages = document.getElementById('chatbot-messages');
const textContainer = document.getElementById('chatbot-text');

async function fetchUpsellSuggestion() {
  try {
    const cart = await fetch('/cart.js').then(res => res.json());
    const response = await fetch('/apps/upsell', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        "Access-Control-Allow-Origin": "*",
      },
      body: JSON.stringify({
        cartItems: cart.items,
      }),
    });

    const data = await response.json();
    console.log(data, 'upsell response');
   // showChatbotModal(data.suggestion);

   const modelMessage = data.suggestion

   const jsonMatch = modelMessage.match(/\{[\s\S]*?\}/);

    if (!jsonMatch) {
      throw new Error('No valid JSON found in model response');
    }

    // Clean and parse the JSON block
    const cleanedJson = jsonMatch[0]
      .replace(/[\n\r\t]/g, '')     // remove newlines, tabs, etc.
      .replace(/\\(?=")/g, '');     // remove unnecessary backslashes before quotes

    const upsellData = JSON.parse(cleanedJson);
    console.log('Parsed upsell data:', upsellData);
   //const upsellData = JSON.parse(modelMessage.match(/{[\s\S]*}/)[0]);

  // const { title, image, price, message } = upsellData;
   
  // console.log('title', title)
  // Now you can use them in your UI

  // showChatbotModal({ title, image, price, message });
   showChatbotModal(upsellData)

  } catch (err) {
    console.error('Upsell API error:', err);
   // showChatbotModal("Something went wrong. Please try again.");
  }
}

// Button-triggered manual upsell request
button.addEventListener('click', async () => {
  button.disabled = true;
  button.textContent = 'Thinking...';

  await fetchUpsellSuggestion();

  button.disabled = false;
  button.textContent = 'Suggest an Upsell';
});



/*if (typeof Shopify !== 'undefined' && Shopify.onItemAdded) {
  const oldCallback = Shopify.onItemAdded;
  Shopify.onItemAdded = function (line_item) {
    console.log('[Add to Cart] Shopify AJAX item added');
    fetchCartAndTriggerUpsell();
    if (typeof oldCallback === 'function') oldCallback(line_item);
  };
}



// Auto-trigger upsell on add-to-cart events
document.body.addEventListener('click', function (e) {
  const btn = e.target.closest('button, a, input');
  if (btn && JSON.stringify(btn).includes('/cart/add')) {
    console.log('[Add to Cart] AJAX-style button click detected');
    setTimeout(fetchCartAndTriggerUpsell, 1000);
  }
});*/


//let previousCartItems = [];

//async function checkCartChange() {
 // try {
   // const cart = await fetch('/cart.js').then(res => res.json());
   // const currentItems = cart.items;

   // // Get all current product IDs
   // const previousIds = previousCartItems.map(item => item.id);
   // const currentIds = currentItems.map(item => item.id);

   // // Find if there's any ID in current that's not in previous → NEW item
   // const newItem = currentItems.find(item => !previousIds.includes(item.id));

    //if (newItem) {
   //   console.log('New item added to cart:', newItem);
  //    fetchUpsellSuggestion()
   //   //showChatbotModal(); // Trigger modal only on new product
   // }

   // previousCartItems = currentItems;
  //} catch (err) {
  //  console.error('Failed to check cart.js:', err);
 // }
//}

// Start polling every 2 seconds
//setInterval(checkCartChange, 2000);
//let previousCartItems = [];
//let hasCartChanged = false;
//let isNavigatingAway = false;

// Detect navigation or tab switch
//window.addEventListener('beforeunload', () => {
  //isNavigatingAway = true;
//});

//document.addEventListener('visibilitychange', () => {
//  if (document.visibilityState === 'hidden') {
//    isNavigatingAway = true;
//  }
//});

{% comment %} async function checkCartChange() {
  try {
    const cart = await fetch('/cart.js').then(res => res.json());
    const currentItems = cart.items;

    let newItem = null;

    for (const currentItem of currentItems) {
      const previousItem = previousCartItems.find(item => item.id === currentItem.id);

      if (!previousItem) {
        newItem = currentItem;
        break;
      } else if (currentItem.quantity > previousItem.quantity) {
        newItem = currentItem;
        break;
      }
    }

    if (newItem && !isNavigatingAway) {
      console.log('New item added or quantity increased:', newItem);
      hasCartChanged = true;
      fetchUpsellSuggestion();
      // showChatbotModal();
    }

    previousCartItems = currentItems;
  } catch (err) {
    console.error('Failed to check cart.js:', err);
  }
}

// Start polling
setInterval(checkCartChange, 2000); {% endcomment %}


//function showChatbotModal(message) {
//  textContainer.textContent = message;
//  document.getElementById('chatbot-messages').style.display = 'block';
//  document.getElementById('chatbot-backdrop').style.display = 'block';
//}

function showChatbotModal(message) {
 const modal = document.getElementById('chatbot-messages');
 const titleEl = document.getElementById('chatbot-title');
 const imageEl = document.getElementById('chatbot-image');
 const priceEl = document.getElementById('chatbot-price');
 const textEl = document.getElementById('chatbot-text');
 const variantInput = document.getElementById('upsell-variant-id');


  titleEl.textContent = message.title || '';
  priceEl.textContent = message.price ? `$${message.price}` : '';
  textEl.textContent = message.message || '';
  imageEl.src = message.image;
  //variantInput.value = message.id;

const gid = message.id
const numericId = gid.split("/").pop(); // "12345678901234"


variantInput.value = numericId
  console.log('Image URL:', message.image);


  // Store product title in button for later use
  //const addButton = document.getElementById('chatbot-add-to-cart');
  //addButton.dataset.productTitle = message.title;


  //textContainer.textContent = message;
  document.getElementById('chatbot-messages').style.display = 'block';
  document.getElementById('chatbot-backdrop').style.display = 'block';
}

//function showChatbotModal(suggestion) {
//  const modal = document.getElementById('chatbot-messages');
//  const titleEl = document.getElementById('chatbot-title');
//  const imageEl = document.getElementById('chatbot-image');
//  const priceEl = document.getElementById('chatbot-price');
//  const textEl = document.getElementById('chatbot-text');

//  if (suggestion) {
//    titleEl.textContent = suggestion.title || '';
//    priceEl.textContent = suggestion.price ? `$${suggestion.price}` : '';
//    textEl.textContent = suggestion.message || '';

//    if (suggestion.image) {
//      imageEl.src = suggestion.image;
//      imageEl.style.display = 'block';
//    } else {
//      imageEl.style.display = 'none';
//    }
//  }

//  modal.style.display = 'block';
//}

function closeChatbotModal() {
  document.getElementById('chatbot-messages').style.display = 'none';
}


function closeChatbotModal() {
  document.getElementById('chatbot-messages').style.display = 'none';
  document.getElementById('chatbot-backdrop').style.display = 'none';
}






// Hook into all fetch calls to detect /cart/add.js usage
(function () {
  const originalFetch = window.fetch;

  window.fetch = async (...args) => {
    const response = await originalFetch(...args);

    const url = args[0];

    if (typeof url === 'string' && url.includes('/cart/add')) {
      console.log('[Cart Alert] Add to cart triggered via fetch:', url);

      // Use .clone() if you need to read the body here
      try {
        const clonedResponse = response.clone();
        const data = await clonedResponse.json();
        console.log('[Cart Alert] Added item:', data);
        fetchUpsellSuggestion(); // Custom logic
      } catch (err) {
        console.error('Error reading response:', err);
      }
    }

    return response; // 🚨 Always return the response
  };
})();



//(function() {
//  const originalFetch = window.fetch;

//  window.fetch = async (...args) => {
//    const response = await originalFetch(...args);

//    const url = args[0];
//    const options = args[1] || {};

    // Detect cart add API call
//    if (typeof url === 'string' && url.includes('/cart/add')) {
//      console.log('[Cart Alert] Add to cart triggered via fetch:', url);

//      try {
//        const clone = response.clone();
//        const addedItem = await clone.json();

//        alert(`🛒 "${addedItem.title}" has been added to your cart!`);
//        console.log('[Cart Alert] Added item:', addedItem);

        // 🔁 Trigger upsell fetch
//        fetchUpsellSuggestion();
//      } catch (e) {
//        console.warn('Failed to parse cart add response:', e);
//      }
//   }

//    return response;
//  };
//})(); 



document.addEventListener('DOMContentLoaded', function () {
  const form = document.getElementById('add-to-cart-form');

  if (form) {
    form.addEventListener('submit', async function(e) {
      e.preventDefault();

      const formData = new FormData(form);

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          body: formData
        });

        if (response.ok) {
          const data = await response.json();
          console.log('✅ Added to cart:', data);
          alert(`🛒 "${data.title}" was added to your cart.`);
        } else {
          alert('❌ Failed to add to cart.');
        }
      } catch (error) {
        console.error('Add to cart error:', error);
        alert('❌ Error adding item to cart.');
      }
    });
  }
});


</script>

{% schema %}
  {
    "name": "AI Agent",
    "target": "section",
    "class": "chatbot-section",
    "settings": []
  }
  {% endschema %}


