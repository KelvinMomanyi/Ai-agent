{% comment %} 
<!-- Modal Backdrop -->
<div id="chatbot-backdrop" style="
  display: none;
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 9998;
"></div>


<!-- NEW Modal -->
<div id="chatbot-messages" style="
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 0;
  border-radius: 12px;
  width: 90%;
  max-width: 700px;
  box-shadow: 0 15px 30px rgba(0,0,0,0.2);
  z-index: 9999;
  font-family: 'DM Sans', sans-serif;
  overflow: hidden;
">
  <!-- Close Button -->
  <button onclick="closeChatbotModal()" style="
    position: absolute;
    top: 15px;
    right: 20px;
    background: none;
    border: none;
    font-size: 22px;
    font-weight: bold;
    color: #333;
    cursor: pointer;
    z-index: 10;
  ">&times;</button>

  <!-- Flex Container -->
  <div style="display: flex; flex-direction: row; height: 100%;">
    <!-- Image Section -->
    <div style="flex: 1; background-color: #f9f9f9; display: flex; align-items: center; justify-content: center;">
      <img id="chatbot-image" src="" alt="" style="width: 100%; height: auto; object-fit: contain; max-height: 100%;" />
    </div>

    <!-- Info Section -->
    <div style="flex: 1; padding: 30px; display: flex; flex-direction: column; justify-content: center;">
      <h3 id="chatbot-title" style="margin: 0 0 10px; font-size: 1.5rem; font-weight: 600;"></h3>
      <p id="chatbot-price" style="font-weight: bold; font-size: 1.2rem; margin-bottom: 10px;"></p>
      <p id="chatbot-text" style="margin-bottom: 20px; color: #555;"></p>

      <form method="POST" action="/cart/add" style="margin-top: auto;">
        <input type="hidden" name="id" id="upsell-variant-id" />
        <button type="submit" style="
          background-color: #000;
          color: #fff;
          padding: 12px 24px;
          font-size: 1rem;
          border: none;
          border-radius: 6px;
          cursor: pointer;
          width: 100%;
          transition: background 0.3s ease;
        ">Add to Cart</button>
      </form>
    </div>
  </div>
</div> {% endcomment %}
<!-- Modal Backdrop -->
<div id="chatbot-backdrop" class="cb-backdrop"></div>

<!-- Modal -->
<div id="chatbot-messages" class="cb-modal">
  <button onclick="closeChatbotModal()" class="cb-close-btn">&times;</button>
  <div class="cb-flex-container">
    <div class="cb-image-section">
      <img id="chatbot-image" src="" alt="" />
    </div>
    <div class="cb-info-section">
      <h3 id="chatbot-title"></h3>
      {% comment %} <p id="chatbot-price" style="font-weight: bold; font-size: 1.2rem; margin-bottom: 10px;"></p> {% endcomment %}
      <div style="display:flex; flex-direction:row; gap:5px">
        <p class="cb-price" id="chatbot-currency">{{ shop.currency  }}</p>
        <p id="chatbot-price" style="font-weight: bold; font-size: 1.2rem; margin-bottom: 10px;"></p>
      </div>
      <p id="chatbot-text" class="cb-text"></p>
      <form method="POST" action="/cart/add">
        <input type="hidden" name="id" id="upsell-variant-id" />
        <button type="submit" class="cb-add-to-cart-btn">Add to Cart</button>
      </form>
    </div>
  </div>
</div>


<style>
  /* Modal Backdrop */
.cb-backdrop {
  display: none;
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 9998;
}

/* Modal Container */
.cb-modal {
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: #fff;
  padding: 0;
  border-radius: 12px;
  width: 90%;
  max-width: 700px;
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
  z-index: 9999;
  font-family: 'DM Sans', sans-serif;
  overflow: hidden;
}

/* Close Button */
.cb-close-btn {
  position: absolute;
  top: 15px;
  right: 20px;
  background: none;
  border: none;
  font-size: 22px;
  font-weight: 700;
  color: #333;
  cursor: pointer;
  z-index: 10;
}

/* Modal Flex Container */
.cb-flex-container {
  display: flex;
  flex-direction: row;
  height: 100%;
  min-height: 320px;
}

/* Image Section */
.cb-image-section {
  flex: 1;
  background-color: #f9f9f9;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.cb-image-section img {
  width: 100%;
  height: auto;
  object-fit: contain;
  max-height: 100%;
}

/* Info Section */
.cb-info-section {
  flex: 1;
  padding: 30px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.cb-info-section h3 {
  margin: 0 0 10px;
  font-size: 1.5rem;
  font-weight: 600;
}

.cb-info-section .cb-price {
  font-weight: bold; 
  font-size: 1.2rem;
  margin-bottom: 10px;
}

.cb-info-section .cb-text {
  margin-bottom: 20px;
  color: #555;
}

/* Add to Cart Button */
.cb-add-to-cart-btn {
  background-color: #000;
  color: #fff;
  padding: 12px 24px;
  font-size: 1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  width: 100%;
  transition: background 0.3s ease;
}

.cb-add-to-cart-btn:hover,
.cb-add-to-cart-btn:focus {
  background-color: #222;
  outline: none;
}

/* Responsive: Stack vertically on small screens */
@media (max-width: 600px) {
  .cb-flex-container {
    flex-direction: column;
    min-height: auto;
  }
  
  .cb-image-section,
  .cb-info-section {
    flex: none;
    width: 100%;
    padding: 20px;
  }

  .cb-info-section {
    padding-top: 0;
  }
}

</style>

<script>
const button = document.getElementById('chatbot-button');
const messages = document.getElementById('chatbot-messages');
const textContainer = document.getElementById('chatbot-text');

async function fetchUpsellSuggestion() {
  try {
    const cart = await fetch('/cart.js').then(res => res.json());
    const response = await fetch('/apps/upsell', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        "Access-Control-Allow-Origin": "*",
      },
      body: JSON.stringify({
        cartItems: cart.items,
      }),
    });

    const data = await response.json();
    console.log(data, 'upsell response');
   // showChatbotModal(data.suggestion);

   const modelMessage = data.suggestion

   const jsonMatch = modelMessage.match(/\{[\s\S]*?\}/);

    if (!jsonMatch) {
      throw new Error('No valid JSON found in model response');
    }

    // Clean and parse the JSON block
    const cleanedJson = jsonMatch[0]
      .replace(/[\n\r\t]/g, '')     // remove newlines, tabs, etc.
      .replace(/\\(?=")/g, '');     // remove unnecessary backslashes before quotes

    const upsellData = JSON.parse(cleanedJson);
    console.log('Parsed upsell data:', upsellData);
  
   showChatbotModal(upsellData, cart)
   trackEvent('upsell_impression', { id: upsellData.id }); // impression
  } catch (err) {
    console.error('Upsell API error:', err);
   // showChatbotModal("Something went wrong. Please try again.");
  }
}




function showChatbotModal(message, cart) {
 const modal = document.getElementById('chatbot-messages');
 const titleEl = document.getElementById('chatbot-title');
 const imageEl = document.getElementById('chatbot-image');
 const priceEl = document.getElementById('chatbot-price');
 const priceCurrency = document.getElementById('chatbot-currency');
 const textEl = document.getElementById('chatbot-text');
 const variantInput = document.getElementById('upsell-variant-id');


  titleEl.textContent = message.title || '';
  priceEl.textContent = message.price ;
  priceCurrency.textContent = cart.currency
  //priceEl.textContent = message.price ? `${message.price}` : '';
  textEl.textContent = message.message || '';
  imageEl.src = message.image;
  //variantInput.value = message.id;

const gid = message.id
const numericId = gid.split("/").pop(); // "12345678901234"


variantInput.value = numericId
  console.log('Image URL:', message.image);


 
  document.getElementById('chatbot-messages').style.display = 'block';
  document.getElementById('chatbot-backdrop').style.display = 'block';
}



function closeChatbotModal() {
  document.getElementById('chatbot-messages').style.display = 'none';
  document.getElementById('chatbot-backdrop').style.display = 'none';
}



(function () {
  const originalFetch = window.fetch;

  window.fetch = async (...args) => {
    const response = await originalFetch(...args);

    const url = args[0];

    if (typeof url === 'string' && url.includes('/cart/add')) {
      console.log('[Cart Alert] Add to cart triggered via fetch:', url);

      // Use .clone() if you need to read the body here
      try {
        const clonedResponse = response.clone();
        const data = await clonedResponse.json();
        console.log('[Cart Alert] Added item:', data);
        fetchUpsellSuggestion(); // Custom logic
      } catch (err) {
        console.error('Error reading response:', err);
      }
    }

    return response; // 🚨 Always return the response
  };
})();


(function () {
  const originalXHROpen = XMLHttpRequest.prototype.open;

  XMLHttpRequest.prototype.open = function (method, url) {
    if (url.includes('/cart/add')) {
      this.addEventListener('load', function () {
        console.log('[Cart Alert - XHR] Add to cart triggered via XMLHttpRequest:', url);
        fetchUpsellSuggestion(); // custom logic
      });
    }
    return originalXHROpen.apply(this, arguments);
  };
})();


document.addEventListener('submit', function (e) {
  const form = e.target;
  if (form.action.includes('/cart/add')) {
    console.log('[Cart Alert - Form] Add to cart triggered via form submission');
    fetchUpsellSuggestion();
  }
});

(function () {
  console.log('[🛒 Intercepting cart/add]');

  function onCartAddIntercept(data, metadata = {}) {
    console.log('🟢 Cart Add Intercepted:', data, metadata);
    // 👉 Do your own logic: upsell, show modal, analytics, etc.
  }

  // ✅ Hook into form submissions that post to /cart/add
  document.addEventListener("submit", async function (event) {
    const form = event.target;
    if (
      form.tagName === "FORM" &&
      form.action &&
      form.action.includes("/cart/add")
    ) {
      // You can also skip if event.defaultPrevented

      event.preventDefault(); // Optional: only if you want to hijack it

      const formData = new FormData(form);
      const postData = new URLSearchParams(formData);

      // Send form manually (if you prevented default)
      const response = await fetch(form.action, {
        method: form.method,
        body: postData,
        headers: {
          "Accept": "application/json",
        },
      });

      try {
        const json = await response.json();
        onCartAddIntercept(json, {
          source: 'form',
          productId: formData.get("id"),
          quantity: formData.get("quantity"),
        });
      } catch (e) {
        console.warn("❌ Failed to parse cart/add response", e);
      }
    }
  });

  // ✅ Monkey-patch XMLHttpRequest to intercept /cart/add (like the code you shared)
  const originalOpen = XMLHttpRequest.prototype.open;
  const originalSend = XMLHttpRequest.prototype.send;

  XMLHttpRequest.prototype.open = function (method, url, ...rest) {
    this._url = url;
    this._method = method;
    return originalOpen.call(this, method, url, ...rest);
  };

  XMLHttpRequest.prototype.send = function (body) {
    const xhr = this;
    const url = xhr._url;

    xhr.addEventListener("load", function () {
      if (url && url.includes("/cart/add")) {
        try {
          const contentType = xhr.getResponseHeader("content-type");
          if (contentType && contentType.includes("application/json")) {
            const json = JSON.parse(xhr.responseText);
            onCartAddIntercept(json, { source: "xhr", url, body });
          }
        } catch (e) {
          console.warn("❌ Error parsing XHR cart/add", e);
        }
      }
    });

    return originalSend.call(this, body);
  };
})();




  document.addEventListener('DOMContentLoaded', () => {
    const addToCartForms = document.querySelectorAll('form[action^="/cart/add"]');
  
    addToCartForms.forEach((form) => {
      form.addEventListener('submit', (e) => {
        const sellingPlanId = window.getCurrentSellingPlanId();
  
        // You can now use this ID however you want:
        console.log('Selected Selling Plan ID:', sellingPlanId);
  
        // Example: append to the form as a hidden input (if not already there)
        if (!form.querySelector('input[name="selling_plan"]')) {
          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = 'selling_plan';
          input.value = sellingPlanId;
          form.appendChild(input);
        } else {
          form.querySelector('input[name="selling_plan"]').value = sellingPlanId;
        }
  
        // OPTIONAL: You could also trigger your own logic here
        // someOtherClassInstance.handleSellingPlan(sellingPlanId);
      });
    });
  });
  
// async function fetchCart() {
 //   const variantId = '43726492881045'; // Replace with your actual variant ID
///    const quantity = 1;
  
//    try {
//      const response = await fetch('/cart/add.js', {
//        method: 'POST',
//        headers: {
//          'Content-Type': 'application/json'
//        },
//        body: JSON.stringify({
//         id: variantId,
//          quantity: quantity
//        })
//      });
  
//      const data = await response.json();
 //     console.log('Item added:', data);
//    } catch (error) {
//      console.error('Error adding item to cart:', error);
//    }
//  }
  
  //fetchCart(); 



let lastCartState = null;

// Function to fetch current cart state
async function fetchCartState() {
  try {
    const res = await fetch('/cart.js', { cache: 'no-store' }); // no-cache to get fresh data
    if (!res.ok) throw new Error('Failed to fetch cart');
    return await res.json();
  } catch (err) {
    console.error('Error fetching cart:', err);
    return null;
  }
}

// Function to compare carts simply (by item count or total price)
function isCartChanged(oldCart, newCart) {
  if (!oldCart || !newCart) return true;
  if (oldCart.item_count !== newCart.item_count) return true;
  if (oldCart.total_price !== newCart.total_price) return true;
  return false;
}

// What to do when cart changes
function onCartChange(cart) {
  console.log('Cart changed:', cart);
  fetchUpsellSuggestion()
  // TODO: Your upsell logic, UI update, etc.
}

// Polling loop
async function pollCart(interval = 3000) {
  const cart = await fetchCartState();
  if (isCartChanged(lastCartState, cart)) {
    lastCartState = cart;
    onCartChange(cart);
  }
  setTimeout(() => pollCart(interval), interval);
}

// Start polling on page load
//document.addEventListener('DOMContentLoaded', () => {
//  pollCart(3000); // every 3 seconds (adjust as needed)
//});



function initCartPolling() {
  if (window._cartPollingInitialized) return; // prevent multiple initializations
  window._cartPollingInitialized = true;
  pollCart(3000);
}

// Standard page load
document.addEventListener('DOMContentLoaded', initCartPolling);

// Optional: Re-trigger for themes using Ajax navigation (e.g., Shopify sections)
document.addEventListener('page:load', initCartPolling); // e.g., if your theme uses it







//CONVERSIONS
function trackEvent(eventName, data = {}) {
  fetch('/apps/upsell/track', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      event: eventName,
      timestamp: new Date().toISOString(),
      data: data,
    }),
  }).then(res => {
    if (!res.ok) {
      console.error(`Failed to track ${eventName}`);
    }
  }).catch(err => {
    console.error('Tracking error:', err);
  });
}


const form = document.querySelector('#chatbot-messages form');
form.addEventListener('submit', () => {
  trackEvent('upsell_add_to_cart', { id: document.getElementById('upsell-variant-id').value });
});


</script>

{% schema %}
  {
    "name": "AI Agent",
    "target": "section",
    "class": "chatbot-section",
    "settings": []
  }
  {% endschema %}


